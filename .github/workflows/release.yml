name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libavcodec-dev libavformat-dev \
                                  libavutil-dev libavfilter-dev libavdevice-dev \
                                  libswscale-dev libswresample-dev clang

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --token ${CARGO_REGISTRY_TOKEN}

  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: terminal-media
            asset_name: terminal-media-linux-x86_64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: terminal-media
            asset_name: terminal-media-linux-aarch64
            cross: true

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: terminal-media
            asset_name: terminal-media-macos-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: terminal-media
            asset_name: terminal-media-macos-aarch64

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: terminal-media.exe
            asset_name: terminal-media-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libavcodec-dev libavformat-dev \
                                  libavutil-dev libavfilter-dev libavdevice-dev \
                                  libswscale-dev libswresample-dev clang

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.cross && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg pkg-config

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg
          echo "FFMPEG_DIR=C:\ProgramData\chocolatey\lib\ffmpeg\tools\ffmpeg" >> $env:GITHUB_ENV

      - name: Build (native)
        if: "!matrix.cross"
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Build (cross)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --locked --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest' && !matrix.cross
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create tarball (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          cd ../../..

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          cd ../../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-crate, build-binaries]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog from commit history
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${GITHUB_REF_NAME})
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${GITHUB_REF_NAME})
          fi

          # Save to file for multiline handling
          echo "## Changelog" > changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          echo "" >> changelog.md
          echo "## Downloads" >> changelog.md
          echo "" >> changelog.md
          echo "Pre-built binaries are available for the following platforms:" >> changelog.md
          echo "" >> changelog.md
          echo "- **Linux**: \`terminal-media-linux-x86_64.tar.gz\`, \`terminal-media-linux-aarch64.tar.gz\`" >> changelog.md
          echo "- **macOS**: \`terminal-media-macos-x86_64.tar.gz\`, \`terminal-media-macos-aarch64.tar.gz\`" >> changelog.md
          echo "- **Windows**: \`terminal-media-windows-x86_64.exe.zip\`" >> changelog.md
          echo "" >> changelog.md
          echo "Or install via cargo:" >> changelog.md
          echo "\`\`\`bash" >> changelog.md
          echo "cargo install terminal-media" >> changelog.md
          echo "\`\`\`" >> changelog.md

          # Set output
          echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
